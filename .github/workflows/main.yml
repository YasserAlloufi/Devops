name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1. Initialisation
  install_dependencies:
    name: Initialisation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PHP and Composer
        run: |
          sudo apt-get update
          sudo apt-get install -y php8.1 php-cli php-mbstring unzip curl git
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer
        shell: bash

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies (NPM and Composer)
        run: |
          npm install
          composer install
        shell: bash

  # 2. Analyse de sécurité
  security_analysis:
    name: Analyse de sécurité
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: OWASP Dependency-Check
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-7.4.4.zip
          unzip dependency-check.zip -d dependency-check
          ./dependency-check/bin/dependency-check.sh --project Akaunting --out ./dependency-report
        shell: bash

      - name: Retire.js Scan
        run: npx retire --outputpath ./retirejs-report
        shell: bash

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=akaunting \
            -Dsonar.organization=my-org \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        shell: bash

  # 3. Compilation
  build:
    name: Construction
    runs-on: ubuntu-latest
    needs: security_analysis
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Frontend Assets
        run: npm run build
        shell: bash

      - name: Apply Database Migrations
        run: php artisan migrate --force
        shell: bash

  # 4. Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Unit Tests
        run: ./vendor/bin/phpunit --testdox
        shell: bash

      - name: Run Functional Tests (Frontend)
        run: npm run test
        shell: bash

  # 5. Déploiement
  deploy:
    name: Déploiement
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Staging
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          echo "Déploiement vers staging..."
          az webapp deployment source config-zip \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.APP_SERVICE_NAME }} \
            --src build.zip
        shell: bash

  # 6. Surveillance post-déploiement
  monitoring:
    name: Surveillance
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Surveillance avec Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk monitor
        shell: bash

      - name: Configurer les alertes Azure Security Center
        run: echo "Configurer les alertes Azure Security Center"
        shell: bash
